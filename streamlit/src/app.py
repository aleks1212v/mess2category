import streamlit as st
# To make things easier later, we're also importing numpy and pandas for
# working with sample data.
import numpy as np
import pandas as pd
import os

import requests
import json

import altair as alt

serverhost = 'localhost'#'message2category'
serverport = '5000'

currdir = os.getcwd()

#def load_username():
#    try:
#        log_path = os.path.join(currdir, r'login.txt')
#        logins = []
#        with open(log_path, 'r') as f:
#            for line in f:
#                l = line.strip('\n')
#                logins.append(l)
#        return logins
#    except Exception:
#        print('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞')
#    return ''

def write_content(raw_json):
    top1_category = raw_json['top1_category']
    category = pd.DataFrame(raw_json['category'])
    subcategory = pd.DataFrame(raw_json['subcategory'])
    executor = pd.DataFrame([raw_json['executor']])
    top_words = raw_json['top_words'].split(', ')
    message = ''.join(raw_json['message'].values())
    st.markdown('### –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:')
    st.write(message)
    st.write('----------------')
    st.markdown('### –ù–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è:')
    st.write(top1_category)
    st.write('----------------')
    st.markdown('### –¢–æ–ø-3 –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:')
    st.write(category)
    
    chart = alt.Chart(category).mark_bar(size=30).encode(x='value', y='category', color='value').properties(width=700, height = 300)
    st.altair_chart(chart)
    st.write('----------------')
    st.markdown('### –¢–æ–ø-3 –∏–∑ 10 –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π:')
    st.write(subcategory)
    
    chart_2 = alt.Chart(subcategory).mark_bar(size=30).encode(x='value', y='top_words', color='value').properties(width=700, height = 300)
    st.altair_chart(chart_2)
    st.write('----------------')
    st.markdown('### –¢–æ–ø-3 –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:')
    st.write(executor)
    
    ex = executor.T
    ex.columns = ['value']
    ex['name'] = ex.index
    ex.reset_index(drop=True, inplace=True)
    chart_3 = alt.Chart(ex).mark_bar(size=30).encode(x='value', y='name', color='value').properties(width=700, height = 300)
    st.altair_chart(chart_3)
    st.write('----------------')
    st.markdown('### –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:')
    st.write(top_words)
    return

def write_contents(result_frame):
    for record_number in range(result_frame.shape[0]): 
        index = result_frame.loc[record_number]['index']
        user = result_frame.loc[record_number]['username']
        message = result_frame.loc[record_number]['message']
        categoryframe = pd.DataFrame(json.loads(result_frame.loc[record_number]['category']), \
                                     columns = ['id', 'category', 'value'])
        subcategoryframe = pd.DataFrame(json.loads(result_frame.loc[record_number]['subcategory']), \
                                        columns = ['sbj', 'top_words', 'value'])
        executorframe = pd.DataFrame([json.loads(result_frame.loc[record_number]['executor'])])
        top_words = result_frame.loc[record_number]['topwords']
        datetime = result_frame.loc[record_number]['datetime']

        st.markdown('------------------')
        st.markdown('–ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏: ' + str(index))
        st.markdown('–í–Ω–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ' + user)
        st.markdown('–î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + str(datetime))
        st.markdown('### –¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è: ')
        st.write(message)
        
        st.markdown('### –¢–æ–ø-3 –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:')
        st.write(categoryframe)
        chart = alt.Chart(categoryframe).mark_bar(size=30).encode(x='value', y='category', color='value').properties(width=700, height = 300)
        st.altair_chart(chart)
        
        st.markdown('### –¢–æ–ø-3 –∏–∑ 10 –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π:')
        st.write(subcategoryframe)
        chart_2 = alt.Chart(subcategoryframe).mark_bar(size=30).encode(x='value', y='top_words', color='value').properties(width=700, height = 300)
        st.altair_chart(chart_2) 
        
        st.markdown('### –¢–æ–ø-3 –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:')
        st.write(executorframe)
        ex = executorframe.T
        ex.columns = ['value']
        ex['name'] = ex.index
        ex.reset_index(drop=True, inplace=True)
        chart_3 = alt.Chart(ex).mark_bar(size=30).encode(x='value', y='name', color='value').properties(width=700, height = 300)
        st.altair_chart(chart_3)
        
        st.markdown('### –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:')
        st.write(top_words)

        st.write('------------------')

    return

form = st.sidebar.form(key='my_form')

#logins = load_username()
form.markdown("### üé≤ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
#login = form.selectbox("–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å: ", logins)
login = form.text_input("–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å: ", "test")
password = form.text_input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: " , "test", type = "password")
new_button = form.form_submit_button(label='–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç')

form_2 = st.sidebar.form(key='form_2')
num_count = form_2.selectbox("–í—ã–≤–µ—Å—Ç–∏ –º–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ: ", [1, 5, 10, 20, 50, 100])
display_button = form_2.form_submit_button(label='–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å')

form_3 = st.sidebar.form(key='form_3')
statistic_button = form_3.form_submit_button(label='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
delete_button = form_3.form_submit_button(label='–£–¥–∞–ª–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã')

main_form = st.form(key='main_form')
message = main_form.text_input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è:" , '')
analize_button = main_form.form_submit_button(label='–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å')

if new_button:
    keys = {'username':login, 'password': password}
    r = requests.post(r"http://" + serverhost + ":" + serverport + r"/newuser", params=keys)
        
    raw_json = json.loads(r.content.decode('utf-8'))
    
    if raw_json == []:
        st.write('–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')
    elif raw_json['result'] != 'SUCCESS':
        st.write('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å!')
        st.write(raw_json)
    else:
        st.write('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.')

if analize_button:
    if len(message) > 3:
        keys = {'username':login, 'password': password}
        body = json.dumps({'mess' : message}).encode('utf-8') #–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –±–∞–π—Ç—ã
        r = requests.post(r"http://" + serverhost + ":" + serverport + r"/message", params=keys, data = body)
        
        raw_json = json.loads(r.content.decode('utf-8'))
        
        if raw_json == []:
            st.write('–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')
        elif raw_json['result'] != 'SUCCESS':
            st.write('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å!')
            st.write(raw_json)
        else:
            write_content(raw_json)
    else:
        st.write('–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏ –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä')

if display_button:
    keys = {'username':login, 'password': password, 'count': num_count}
    r = requests.get(r"http://" + serverhost + ":" + serverport + r"/message", params=keys)
    
    raw_json = json.loads(r.content.decode('utf-8'))
    
    if raw_json == []:
        st.write('–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')
    elif raw_json['result']  == '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!':
        st.write('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å!')
        st.write(raw_json)
    else:
        keys = ['index' , 'username', 'message' , 'category','subcategory' , 'executor', 'topwords', 'datetime', 'isvisible']
        result_dict = {key : [] for key in keys}
    
        for row in raw_json['result']:
            for i, key in enumerate(keys):
                result_dict[key].append(row[i])
        result_frame = pd.DataFrame(result_dict)
        write_contents(result_frame)

if statistic_button:
    keys = {'username':login, 'password': password}

    r = requests.get(r"http://" + serverhost + ":" + serverport + r"/statistics", params=keys)
    raw_json = json.loads(r.content.decode('utf-8'))
    result = raw_json['result']
    if result == '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!' or result == []:
        st.write('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å!')
        st.write(raw_json)
    else:
        df = pd.DataFrame([result], index = ['–ß–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤'])
        st.markdown('### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:')
        st.write(df)
        
if delete_button:
    keys = {'username':login, 'password': password}

    r = requests.delete(r"http://" + serverhost + ":" + serverport + r"/message", params=keys)
    raw_json = json.loads(r.content.decode('utf-8'))
    result = raw_json['result']
    if result == '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!' or result == []:
        st.write('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å!')
        st.write(raw_json)
    elif result =='SUCCESS':
        if login == 'admin':
            st.markdown('### –ó–∞–ø—Ä–æ—Å—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–¥–∞–ª–µ–Ω—ã')
        else:
            st.markdown('### –í—Å–µ –≤–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã —Å–∫—Ä—ã—Ç—ã, –Ω–æ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤–∏–¥–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')